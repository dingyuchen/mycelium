{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Tooling","n":1}}},{"i":2,"$":{"0":{"v":"Nix","n":1},"1":{"v":"\nNix is an immutable package manager","n":0.408}}},{"i":3,"$":{"0":{"v":"Official Guide","n":0.707}}},{"i":4,"$":{"0":{"v":"Notes","n":1}}},{"i":5,"$":{"0":{"v":"How to Learn Nix","n":0.5},"1":{"v":"- [How to Learn Nix, Part 1: What's all this about?](https://ianthehenry.com/posts/how-to-learn-nix/introduction/)\n\n    - I gave Nix another try recently,\n\n- [How to Learn Nix, Part 2: Prior knowledge](https://ianthehenry.com/posts/how-to-learn-nix/prior-knowledge/)\n\n    - I remember there being a total of three different ways to get software on my NixOS box:\n        - System-wide services, like `sshd` or `nginx` that are run by systemd. These are declared in the file `/etc/nixos/configuration.nix` and NixOS installed them (somehow).\n        - User software that I use interactively, like `rg` or `git`. I installed these commands with `nix-env -i` on a per-user basis.\n            - > so is this the difference between `nix-env -iA` and `nix-env -i` ?\n        - Project-specific software, only visible when running in a `nix-shell`. Declared in a file called `shell.nix` in the project’s directory. This is where I would put things like `rustc` or whatever – all the build dependencies for a project.\n            - > This feels like the biggest value proposition of Nix, but also entirely useless at my current point in life, since my work deals with `Go` exclusively.\n\n- [How to Learn Nix, Part 3: What we talk about when we talk about Nix](https://ianthehenry.com/posts/how-to-learn-nix/glossary/)\n\n    - I decide to start learning Nix by reading through the glossary.\n        - > sldkfjsk\n","n":0.071}}},{"i":6,"$":{"0":{"v":"Nix Darwin","n":0.707},"1":{"v":"\n##  Why\n\nNix darwin brings the configuration.nix part of NixOS to macOS.\nI think its a good starting point to find out more about the nix ecosystem and framework.\n\nThe main usecase for vanilla nix would be to create hermetic development environments, but that is not immediately necessary in the case of the work laptop, since most of the versioning and environment management is already handled by `spkit` and `make`.\n\nFurthermore, it makes more sense to use `nix-darwin` to replace the base environment before setting up repo-specific `nix-shell`s to maintain the developer experience.\n\n## Setting Up\n\n```\ndarwin-rebuild switch -I darwin-config=dotfiles/darwin-configuration.nix\n```\nThis sources the custom configuration. `ds` can be used as per normal after.\n\n\n## Appendix\n\n### GUI Apps\n\n> Currently only system-level GUI apps are only linked into `~/Applications`\n>\n> Refer to https://github.com/LnL7/nix-darwin/issues/276\n\n### FHS\n\n[FHS](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard) versions of `vscode` and `vscodium` are not supported on macOS.\nThere is also no need to use the FHS versions, since GUI apps are better managed as `brew casks` at this point in time anyway.\n\n## PatchELF","n":0.08}}},{"i":7,"$":{"0":{"v":"Fish","n":1},"1":{"v":"\n## Default shell\n\nIn `darwin-configuration.nix`, set\n```\nenvironment.shells = [ pkgs.fish ];\n```\nThis should add `/run/current-system/sw/bin/fish` into `/etc/shells`.\nSupposedly this avoids some problems with setting your default shell later.\n\nNow also in `darwin-configuration.nix`, set \n```\nusers.users.<username>.shell = pkgs.fish;\n```\n\nIf also using `home-manager`, set\n```\nprograms.fish.enable = true;\n```\nin `home-manager.users.<username>`\n\n### Aliases\n\nI use a shortcut `ds` to trigger `darwin-rebuild switch`, and `ls` as `exa --icons`.\n```\nshellAliases = {\n    ds = \"darwin-rebuild switch\";\n    ls = \"exa --icons\";\n}\n```","n":0.127}}},{"i":8,"$":{"0":{"v":"Programs","n":1}}},{"i":9,"$":{"0":{"v":"Xplatform","n":1}}},{"i":10,"$":{"0":{"v":"Qemu","n":1},"1":{"v":"\n[Homepage](https://www.qemu.org/)\n\nQemu is an open-source emualator for operating systems.\nIt makes use of [[kvm|programs.xplatform.kvm]] to run virtual machines at near-native speed. (Virtualization)\n\n## Difference between Virtualization and Emulation\n\nVirtualization relies on the underlying machine architecture being the same.\nTherefore virtualization runs much faster than emulation.\n","n":0.158}}},{"i":11,"$":{"0":{"v":"Kernel-based Virtual Machine","n":0.577},"1":{"v":"\nA virtualization module in the Linux kernel that allows the kernel to function as a hypervisor\n\n[wikipedia](https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine)\n","n":0.25}}},{"i":12,"$":{"0":{"v":"macOS","n":1}}},{"i":13,"$":{"0":{"v":"UTM","n":1},"1":{"v":"\nUTM is a virtual machine manager for MacOS.\nIt is basically a frontend wrapper for [[qemu|programs.xplatform.qemu]] and KVM.\n","n":0.243}}},{"i":14,"$":{"0":{"v":"Self","n":1}}},{"i":15,"$":{"0":{"v":"Projects","n":1}}},{"i":16,"$":{"0":{"v":"Self Hosting","n":0.707},"1":{"v":"\nServices worth hosting on my own machine:\n1. Bitwarden\n2. Plex media server\n3. Pihole\n4. Parsec into windows vm with GPU pass through\n5. Pterodactyl\n\nanything in ![[platforms.vps#^opt-start:#^end]]\n","n":0.209}}},{"i":17,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n#blog\n\n## Why note-taking is important to me\n\nI realise that the human brain is fallible.\nThere are an inordinate amount of things that require my attention in this current day and age, but I do not have the capacity to remember them all.\nOne very important thing is the fact that to advance my career in Software Engineering, I need to maintain a conscious effort to seek out and learn new knowledge.\nLearning is a process of synthesis, recognition is insufficient.\nHowever, it is also an uphill task to internalize concepts without committing new knowledge into memory.\n\nTherefore, I believe that the solution is to somehow organize knowledge in text form, in some way that is future-proof, and to have mechanisms to pull up the necessary information when I need it.\nI have always wanted to make lifelong notes when I came across [Jethro Kuan's Emacs workflow](https://blog.jethro.dev/posts/zettelkasten_with_org/), which led me down the rabbit hole of Zettelkastens and Personal Knowledge Management(PKM) systems.\nThe idea of a constant building up of knowledge and making outsized achievements was enticing.\n\nI have tried almost every tool out there, but I've decided to settle on [Dendron](https://www.dendron.so/) in the end.\nThis is how it came to be.\n\n## A comparison of free, unstructured note-taking tools out there\n\nWhen I first came across the organization of notes as something like a wiki, notes have connections with each other rather than a linear filing, I thought that was definitely the way to go.\n\n\n","n":0.066}}},{"i":18,"$":{"0":{"v":"Hullett","n":1},"1":{"v":"\n# Hullett, an EdTech Experiment\n\nWhat does is the current issue with EdTech User Experience right now?\n\nStakeholders in question:\n\n- Students\n- Parents\n- Teachers\n\nHullett is going to be a complex system because it interacts with 3 different parties at the same time.\n\nAt it's core, Hullett is a platform for supervised exchange of knowledge.\n- becoming frontend agnostic\n- \n\nTraditional systems are not mobile-first\n- fullscreen experience\n\n- track usage time\n  - Timer is based on timestamp on page load and ends on button click\n- switch out to another tab.\n  - streaming data?\n\n## Focus\n\n- Mobile First User Experience\n\n## Timeline\n\n- Working product by mid-Jan\n- Minimal Product \n\n## Feature Set\n\nOnly the User Side\n- Questions:\n  - MCQ\n\n## Tasks\n\n- [x] Set up deployment regions in Singapore\n- [ ] Read up on using mysql and prisma for local development to save quota\n- [ ] Bundle shaving and dynamic imports\n\n## Analytics\n\n- Plausible, DataUnlocker, Fathom\n- ","n":0.085}}},{"i":19,"$":{"0":{"v":"Golinks","n":1},"1":{"v":"\nGolinks is a pretty simple concept:\n\nyou open your browser and type something like `go/nus` to go to your school's website for example.\n\nIn the backend, a DNS record should redirect your request to a server that stores the database of short links to actual links.\n\nAll that server needs to do is to simply return a `503` code with the full address of the school website, and voila.\n\n## Implementation\n\nBefore we go into the implementation, we shall define the short-form url as \"**alias**\" and the full URL address as \"**url**\".\n\nIn my bootleg implementation, we only propose the following features:\n\n1. A frontend for users to query existing aliases\n2. A frontend for users to create a new alias to a website\n3. A server that serves the frontend for empty or invalid aliases\n4. The same server to reply with redirections upon a matching alias\n\n### Search\n\nSearch return a list of matches with levenshtein distance and limit as parameters\n","n":0.081}}},{"i":20,"$":{"0":{"v":"Blog","n":1},"1":{"v":"\nAfter trying out NextJs with `create-t3-app`, it feels like frontend development is fun again.\n\n## Plan\n\n- Astro\n- SolidJs\n- trpc?\n- Cool animations with autoanimate\n- Server-side rendering and generation\n\n","n":0.196}}},{"i":21,"$":{"0":{"v":"Stack","n":1},"1":{"v":"\n# Current WIP\n\n- [[task.2022.10.15.plan-korea-trip]]\n- [[write summary for software engineering at google|self.stack.task.2022.10.15.write-summary-for-software-engineering-at-google]]\n- [[write notes manifesto|self.stack.task.2022.10.15.write-notes-manifesto]]\n\n- [[check out lowlighter/metrics|self.stack.task.2022.10.15.check-out-lowlightermetrics]]\n- [[make useful small programs (crossword puzzle)|self.stack.task.2022.10.15.make-useful-small-programs-crossword-puzzle]]\n","n":0.209}}},{"i":22,"$":{"0":{"v":"Task","n":1}}},{"i":23,"$":{"0":{"v":"2022","n":1}}},{"i":24,"$":{"0":{"v":"10","n":1}}},{"i":25,"$":{"0":{"v":"15","n":1}}},{"i":26,"$":{"0":{"v":"Write Summary for Software Engineering at Google","n":0.378},"1":{"v":"\n[[books.software-engineering-at-google]]\n","n":1}}},{"i":27,"$":{"0":{"v":"Write Notes Manifesto","n":0.577}}},{"i":28,"$":{"0":{"v":"Make Useful Small Programs Crossword Puzzle","n":0.408},"1":{"v":"\nwordlist:\n- sichuan spicy\n- chicken soup\n- tomato soup\n- tomyum soup\n- local laksa\n- cheese tofu\n- fresh aorta\n- spinach\n- crown daisy\n- lettuce\n- aussie sliced lamb shoulder\n- pork jowl\n- iberico pork\n- abalone\n- red tilapia\n- scallop\n- fresh prawn\n- crab\n- green mussel\n- fish maw\n- cod fillet\n- baby squid\n- luncheon meat\n- pork liver\n- mini sausage\n- crab stick\n- quail egg\n- signature mashed shrimpwah\n- cuttlefish ball\n- fish ball with roe\n- fortune bag\n- frozen tofu\n- thin vermicelli\n- cheese rice cake\n- tofu slices\n- winter melon\n- potato slices\n- chinese yam\n- black fungus\n- kelp\n- white turnips\n- lotus root\n- broccoli\n- shiitake mushroom\n- taro\n- pumpkin pancakes\n- huaishan noodles\n- crispy pancake\n- glutinous rice cake with brown sugar\n- mini chinese fried dough(x)","n":0.098}}},{"i":29,"$":{"0":{"v":"Check Out lowlighter/metrics","n":0.577},"1":{"v":"\n[](https://metrics.lecoq.io/embed?user=)","n":1}}},{"i":30,"$":{"0":{"v":"Personal","n":1},"1":{"v":"\n## Hosting\n","n":0.707}}},{"i":31,"$":{"0":{"v":"Dendron","n":1},"1":{"v":"\n# Navigation\n\nCurrently navigation is slightly lacking.\nWe do not have `gd` to go to note, although I will find out how to do this.\n\nCurrently go-to-note can be accomplished with `Ctrl-Enter` or from the Command Palette.\n","n":0.171}}},{"i":32,"$":{"0":{"v":"Tasks","n":1},"1":{"v":"\nDendron tasks are their own notes.\n\nI have tried using markdown checkboxes, but it does not integrate well with Markdown-all-in-one, in that `Alt-X` does not check the checkbox.\n\n## Changing completion status\n\nI set my personal chord of `Meta + Shift + T <status>`\n\n```json\n    {\n        \"key\": \"meta+shift+t x\", // or any other shortcut you want to use\n        \"command\": \"dendron.setTaskStatus\",\n        \"when\": \"editorFocus && dendron:pluginActive\",\n        \"args\": {\n            \"setStatus\": \"x\" // the status you want to set\n        }\n    },\n    {\n        \"key\": \"meta+shift+t space\", // or any other shortcut you want to use\n        \"command\": \"dendron.setTaskStatus\",\n        \"when\": \"editorFocus && dendron:pluginActive\",\n        \"args\": {\n            \"setStatus\": \" \" // the status you want to set\n        }\n    }\n```\n\n","n":0.097}}}]}
